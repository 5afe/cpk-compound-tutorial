{"version":3,"sources":["assets/icons/safe-logo.svg","contracts.ts","components/CompoundForm.tsx","components/ConnectButton.tsx","components/WalletInfo.tsx","components/App.tsx","styles/global.ts","Root.tsx","serviceWorker.ts","index.tsx"],"names":["DAI_ADDRESS","CDAI_ADDRESS","DECIMALS_18","SContainer","styled","div","Line","TitleLine","formatNumber","value","BigNumber","toFixed","tabs","id","label","icon","CompoundForm","web3","address","cpk","dai","useMemo","eth","Contract","cERC20Abi","cDai","useState","cDaiSupplyAPR","setCDaiSupplyAPR","proxyDaiBalance","setProxyDaiBalance","daiBalance","setDaiBalance","cDaiLocked","setCDaiLocked","daiInputAmount","setDaiInputAmount","selectedTab","setSelectedTab","getData","useCallback","a","methods","supplyRatePerBlock","call","cDaiSupplyRate","res","times","balanceOf","balanceOfUnderlying","daiLocked","lockDai","daiAmount","toNumber","transfer","toString","send","from","txs","operation","CPK","Call","to","data","approve","encodeABI","mint","execTransactions","txResult","Promise","resolve","reject","promiEvent","then","receipt","catch","withdrawDai","redeemUnderlying","React","useEffect","size","strong","hash","textSize","showCopyBtn","showIdenticon","showEtherscanBtn","network","href","target","rel","onChange","variant","items","event","color","onClick","WalletConnectProvider","require","default","ConnectButton","onConnect","Button","providerOptions","walletconnect","package","options","infuraId","onClose","console","log","AccountInfo","SAppContainer","main","SHeading","h1","initialWalletState","account","undefined","networkId","App","setWeb3","proxyKit","setProxyKit","walletState","updateWalletState","all","getAccounts","net","getId","accounts","ethLibAdapter","Web3Adapter","create","fetchWalletData","src","SafeLogo","alt","width","WalletInfo","provider","Web3","GlobalStyles","createGlobalStyle","normalize","avertaFont","avertaBoldFont","Root","StrictMode","theme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.781b7382.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/safe-logo.03c8e8d3.svg\";","export const DAI_ADDRESS = '0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa'\nexport const CDAI_ADDRESS = '0x6D7F0754FFeb405d23C51CE938289d4835bE3b14'\n","import {\n  Button,\n  EthHashInfo,\n  Tab,\n  TabItem,\n  Text,\n  TextField\n} from '@gnosis.pm/safe-react-components'\nimport BigNumber from 'bignumber.js'\nimport CPK from 'contract-proxy-kit'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport cERC20Abi from 'src/abis/CErc20.json'\nimport { CDAI_ADDRESS, DAI_ADDRESS } from 'src/contracts'\nimport styled from 'styled-components'\n\ninterface ICompoundForm {\n  web3: any\n  address: string\n  cpk: CPK\n}\n\nconst BLOCKS_PER_YEAR = (365.25 * 24 * 3600) / 15\nconst DECIMALS_18 = 10 ** 18\n\nconst SContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-top: 25px;\n`\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 0;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n  }\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst formatNumber = (value: number) =>\n  new BigNumber(value).div(DECIMALS_18).toFixed(4)\n\nconst tabs: TabItem[] = [\n  {\n    id: '1',\n    label: 'Invest',\n    icon: 'transactionsInactive'\n  },\n  {\n    id: '2',\n    label: 'Withdraw',\n    icon: 'transactionsInactive'\n  }\n]\n\nconst CompoundForm: React.FC<ICompoundForm> = ({ web3, address, cpk }) => {\n  const dai = useMemo(() => new web3.eth.Contract(cERC20Abi, DAI_ADDRESS), [\n    web3\n  ])\n  const cDai = useMemo(() => new web3.eth.Contract(cERC20Abi, CDAI_ADDRESS), [\n    web3\n  ])\n  const [cDaiSupplyAPR, setCDaiSupplyAPR] = useState<string>('0')\n  const [proxyDaiBalance, setProxyDaiBalance] = useState<number>(0)\n  const [daiBalance, setDaiBalance] = useState<number>(0)\n  const [cDaiLocked, setCDaiLocked] = useState<number>(0)\n  const [daiInputAmount, setDaiInputAmount] = useState<string>('')\n  const [selectedTab, setSelectedTab] = useState('1')\n\n  const getData = useCallback(async () => {\n    // supplyRate\n    const cDaiSupplyRate = await cDai.methods.supplyRatePerBlock().call()\n    const res = new BigNumber(cDaiSupplyRate)\n      .times(BLOCKS_PER_YEAR)\n      .div(DECIMALS_18)\n      .times(100)\n      .toFixed(2)\n    setCDaiSupplyAPR(res)\n\n    // DAI Balance\n    const daiBalance = await dai.methods.balanceOf(address).call()\n    setDaiBalance(daiBalance)\n\n    // proxy DAI Balance\n    const proxyDaiBalance = await dai.methods.balanceOf(cpk.address).call()\n    setProxyDaiBalance(proxyDaiBalance)\n\n    // DAI Locked\n    const daiLocked = await cDai.methods.balanceOfUnderlying(cpk.address).call()\n    setCDaiLocked(daiLocked)\n  }, [address, cDai.methods, cpk, dai.methods])\n\n  const lockDai = async () => {\n    if (!daiInputAmount) {\n      return\n    }\n\n    const daiAmount = new BigNumber(daiInputAmount)\n      .times(DECIMALS_18)\n      .toNumber()\n\n    if (cpk.address !== address) {\n      if (proxyDaiBalance < daiAmount) {\n        await dai.methods\n          .transfer(cpk.address, (daiAmount - proxyDaiBalance).toString())\n          .send({ from: address })\n      }\n    }\n\n    const txs = [\n      {\n        operation: CPK.Call,\n        to: DAI_ADDRESS,\n        value: '0',\n        data: dai.methods\n          .approve(CDAI_ADDRESS, daiAmount.toString())\n          .encodeABI()\n      },\n      {\n        operation: CPK.Call,\n        to: CDAI_ADDRESS,\n        value: '0',\n        data: cDai.methods.mint(daiAmount.toString()).encodeABI()\n      }\n    ]\n\n    const txResult: any = await cpk.execTransactions(txs)\n    await new Promise((resolve, reject) =>\n      txResult.promiEvent\n        ?.then((receipt: any) => resolve(receipt))\n        .catch(reject)\n    )\n    getData()\n  }\n\n  const withdrawDai = async () => {\n    if (!daiInputAmount) {\n      return\n    }\n\n    const daiAmount = new BigNumber(daiInputAmount)\n      .times(DECIMALS_18)\n      .toString()\n\n    const txs = [\n      {\n        operation: CPK.Call,\n        to: CDAI_ADDRESS,\n        value: 0,\n        data: cDai.methods.redeemUnderlying(daiAmount).encodeABI()\n      },\n      {\n        operation: CPK.Call,\n        to: DAI_ADDRESS,\n        value: 0,\n        data: dai.methods.transfer(address, daiAmount).encodeABI()\n      }\n    ]\n\n    const txResult: any = await cpk.execTransactions(txs)\n    await new Promise((resolve, reject) =>\n      txResult.promiEvent\n        ?.then((receipt: any) => resolve(receipt))\n        .catch(reject)\n    )\n    getData()\n  }\n\n  React.useEffect(() => {\n    getData()\n  }, [address, cDai, dai, getData])\n\n  return (\n    <SContainer>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Proxy address:\n          </Text>\n        </TitleLine>\n        {cpk.address && (\n          <EthHashInfo\n            hash={cpk.address}\n            textSize=\"xl\"\n            showCopyBtn\n            showIdenticon\n            showEtherscanBtn\n            network=\"rinkeby\"\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Proxy Dai balance:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{formatNumber(proxyDaiBalance)}</Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Dai APR:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{cDaiSupplyAPR}%</Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            DAI balance:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {formatNumber(daiBalance)}{' '}\n          <a href=\"https://ethereum.stackexchange.com/a/80204\" target=\"_blank\" rel=\"noreferrer\">\n            (Request Testnet DAI?)\n          </a>\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            DAI locked:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{formatNumber(cDaiLocked)}</Text>\n      </Line>\n      <br />\n      <Tab\n        onChange={setSelectedTab}\n        selectedTab={selectedTab}\n        variant=\"outlined\"\n        items={tabs}\n      />\n      <br />\n      <TextField\n        id=\"daiAmount\"\n        label=\"DAI Amount\"\n        value={daiInputAmount}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          setDaiInputAmount(event.target.value)\n        }}\n      />\n      <br />\n      {selectedTab === '1' && (\n        <Button size=\"lg\" color=\"primary\" variant=\"contained\" onClick={lockDai}>\n          Invest\n        </Button>\n      )}\n      {selectedTab === '2' && (\n        <Button\n          size=\"lg\"\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={withdrawDai}\n        >\n          Withdraw\n        </Button>\n      )}\n    </SContainer>\n  )\n}\n\nexport default CompoundForm\n","import * as React from 'react'\nimport Web3Connect from 'web3connect'\n\nconst {\n  default: WalletConnectProvider\n} = require('@walletconnect/web3-provider')\n\ntype Props = {\n  onConnect: Function\n}\n\nconst ConnectButton: React.FC<Props> = ({ onConnect }) => (\n  <Web3Connect.Button\n    network=\"rinkeby\"\n    providerOptions={{\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId: 'b42c928da8fd4c1f90374b18aa9ac6ba'\n        }\n      }\n    }}\n    onConnect={onConnect}\n    onClose={() => {\n      console.log('Web3Connect Modal Closed') // modal has closed\n    }}\n  />\n)\n\nexport default ConnectButton\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\n\nconst AccountInfo: React.FC<{ address: string }> = ({ address }) => {\n  if (!address) {\n    return null\n  }\n\n  return (\n    <EthHashInfo\n      hash={address}\n      textSize=\"xl\"\n      showCopyBtn\n      showIdenticon\n      showEtherscanBtn\n      network=\"rinkeby\"\n    />\n  )\n}\n\nexport default AccountInfo\n","import CPK, { Web3Adapter } from 'contract-proxy-kit'\nimport React, { useEffect } from 'react'\nimport SafeLogo from 'src/assets/icons/safe-logo.svg'\nimport CompoundForm from 'src/components/CompoundForm'\nimport ConnectButton from 'src/components/ConnectButton'\nimport WalletInfo from 'src/components/WalletInfo'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\n\nconst SAppContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  max-width: 100vw;\n`\n\nconst SHeading = styled.h1`\n  @media screen and (max-width: 768px) {\n    font-size: 1.2em;\n  }\n`\n\ninterface IWalletState {\n  account: string | undefined\n  networkId: number | undefined\n}\n\nconst initialWalletState = {\n  account: undefined,\n  networkId: undefined\n}\n\nconst App: React.FC = () => {\n  const [web3, setWeb3] = React.useState<Web3 | undefined>(undefined)\n  const [proxyKit, setProxyKit] = React.useState<CPK | undefined>(undefined)\n  const [walletState, updateWalletState] = React.useState<IWalletState>(\n    initialWalletState\n  )\n\n  const onWeb3Connect = (provider: any) => {\n    if (provider) {\n      setWeb3(new Web3(provider))\n    }\n  }\n\n  useEffect(() => {\n    const fetchWalletData = async () => {\n      if (web3) {\n        const [accounts, networkId] = await Promise.all([\n          web3.eth.getAccounts(),\n          web3.eth.net.getId()\n        ])\n\n        const ethLibAdapter = new Web3Adapter({ web3 })\n        const cpk = await CPK.create({ ethLibAdapter })\n        setProxyKit(cpk)\n\n        updateWalletState({\n          account: accounts[0],\n          networkId\n        })\n      }\n    }\n\n    fetchWalletData()\n  }, [updateWalletState, web3])\n\n  return (\n    <SAppContainer>\n      <img src={SafeLogo} alt=\"Gnosis Safe Logo\" width=\"100\"></img>\n      <SHeading>Safe Contract Proxy Kit Compound Example</SHeading>\n      {walletState.account && proxyKit ? (\n        <div>\n          <WalletInfo address={walletState.account!} />\n          <CompoundForm\n            web3={web3}\n            cpk={proxyKit!}\n            address={walletState.account!}\n          />\n        </div>\n      ) : (\n        <>\n          <p>Start by connecting your wallet using button below.</p>\n          <ConnectButton onConnect={onWeb3Connect} />\n        </>\n      )}\n    </SAppContainer>\n  )\n}\n\nexport default App\n","import avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport { createGlobalStyle } from 'styled-components'\nimport { normalize } from 'styled-normalize'\n\nconst GlobalStyles = createGlobalStyle`\n  ${normalize}\n\n  @font-face {\n    font-family: 'Averta';\n    font-display: swap;\n    src: local('Averta'), local('Averta Bold'),\n    url(${avertaFont}) format('woff2'),\n    url(${avertaBoldFont}) format('woff');\n  }\n\n  body {\n    font-family: 'Averta', sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n  }\n\n  .web3connect-connect-button {\n    background-color: #008c73 !important;\n  }\n\n  .walletconnect-qrcode__base {\n    left: 0;\n  }\n\n  a {\n    color: #008c73;\n  }\n`\n\nexport default GlobalStyles\n","import { theme } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport App from 'src/components/App'\nimport GlobalStyles from 'src/styles/global'\nimport { ThemeProvider } from 'styled-components'\n\nconst Root: React.FC = () => (\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n)\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './Root'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}